pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '375299695019'
        AWS_DEFAULT_REGION = 'us-east-1'
        APP_SOURCE_PATH = 'pdf_converter_FastAPI_app/'
        TF_PATH = '.'
        APP_ZIP = "app_package.zip"
        PYTHON_LAYER_ZIP = "python-dependencies-layer.zip"
        LIBREOFFICE_LAYER_ZIP = "LIBREOFFICE_LAYER.zip"
        S3_BUCKET = "pdflambdabucket1575"
    }

    stages {
        stage('Initialize Variables') {
            steps {
                script {
                    env.hostUserId = sh(returnStdout: true, script: 'id -u').trim()
                    env.hostGroupId = sh(returnStdout: true, script: 'id -g').trim()
                    echo "Jenkins user/group ID: ${env.hostUserId}:${env.hostGroupId}"
                }
            }
        }

        stage('Checkout Source') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Build Lambda Packages') {
            agent {
                docker {
                    image 'public.ecr.aws/lambda/python:3.12'
                    args '--user 0 --entrypoint=""'
                }
            }
            steps {
                sh '''
                # Install necessary tools for package management and file operations
                yum update -y && yum install -y wget unzip gzip bzip2

                # Clean up previous build artifacts
                rm -f $APP_ZIP $PYTHON_LAYER_ZIP $LIBREOFFICE_LAYER_ZIP
                rm -rf build

                # Create build directories for app, python dependencies, and LibreOffice
                mkdir -p build/app build/python_dependencies/python build/libreoffice_layer/opt

                echo "--- Building Application Code ZIP ---"
                cp -r pdf_converter_FastAPI_app/main.py \
                    pdf_converter_FastAPI_app/database.py \
                    pdf_converter_FastAPI_app/models.py \
                    pdf_converter_FastAPI_app/utils.py \
                    pdf_converter_FastAPI_app/templates \
                    pdf_converter_FastAPI_app/static \
                    build/app/
                
                cd build/app && gzip -r ../../$APP_ZIP . && cd ../..

                echo "--- Building Python Dependencies Layer ZIP ---"
                # Install Python dependencies into the layer directory
                pip install -r pdf_converter_FastAPI_app/requirements.txt -t build/python_dependencies/python/
                cd build/python_dependencies && gzip -r ../../$PYTHON_LAYER_ZIP . && cd ../..

                echo "--- Building LibreOffice Layer ZIP ---"
                # Download a pre-compiled, stripped-down LibreOffice build for Lambda.
                # Using a reliable source for a direct ZIP file layer.
                LIBREOFFICE_DOWNLOAD_URL="https://github.com/hanhanhan/libreoffice-lambda-layer/releases/download/v7.0.0/libreoffice-layer.zip"
                LIBREOFFICE_ZIP_FILE="libreoffice-layer.zip" # Updated filename
                
                wget -O /tmp/$LIBREOFFICE_ZIP_FILE $LIBREOFFICE_DOWNLOAD_URL
                
                # Create the target directory for LibreOffice within the layer structure
                mkdir -p build/libreoffice_layer/opt/lo

                # Unzip the LibreOffice layer directly into the /opt/lo directory of the layer
                unzip /tmp/$LIBREOFFICE_ZIP_FILE -d build/libreoffice_layer/opt/lo/

                # Clean up temporary files
                rm -f /tmp/$LIBREOFFICE_ZIP_FILE

                # Zip the LibreOffice layer
                cd build/libreoffice_layer && gzip -r ../../$LIBREOFFICE_LAYER_ZIP . && cd ../..

                echo "--- Changing Ownership of ZIP files ---"
                chown ${hostUserId}:${hostGroupId} $APP_ZIP
                chown ${hostUserId}:${hostGroupId} $PYTHON_LAYER_ZIP
                chown ${hostUserId}:${hostGroupId} $LIBREOFFICE_LAYER_ZIP
                '''

                // Pass the zip files to the next stage
                stash includes: "${APP_ZIP}", name: 'app-code'
                stash includes: "${PYTHON_LAYER_ZIP}", name: 'python-dependencies-layer'
                stash includes: "${LIBREOFFRE_LAYER_ZIP}", name: 'libreoffice-layer'
            }
        }

        stage('Terraform Deploy') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {

                        // Get the zip files from the previous stage
                        unstash 'app-code'
                        unstash 'python-dependencies-layer'
                        unstash 'libreoffice-layer'

                        dir(env.TF_PATH) {

                            echo 'Installing Python & Dependencies in Terraform Environment...'
                            sh 'apk add --no-cache python3 py3-pip coreutils'
                            sh 'pip install awscli'

                            def fileHashApp = sh(returnStdout: true, script: "sha256sum ${APP_ZIP} | awk '{print \$1}'").trim()
                            def fileHashLayer = sh(returnStdout: true, script: "sha256sum ${PYTHON_LAYER_ZIP} | awk '{print \$1}'").trim()
                            def fileHashLibre = sh(returnStdout: true, script: "sha256sum ${LIBREOFFICE_LAYER_ZIP} | awk '{print \$1}'").trim()
                            
                            echo "Source code FileHash - ${fileHashApp}"
                            echo "Pyhton dependencies FileHash - ${fileHashLayer}"
                            echo "LibreOffice dependencies FileHash - ${fileHashLibre}"

                            // Copying the zip files to the S3_BUCKET
                            echo 'Copying the zip files to the AWS_S3_BUCKET...'
                            sh "aws s3 cp ${APP_ZIP} s3://${S3_BUCKET}/"
                            sh "aws s3 cp ${PYTHON_LAYER_ZIP} s3://${S3_BUCKET}/"
                            sh "aws s3 cp ${LIBREOFFICE_LAYER_ZIP} s3://${S3_BUCKET}/"

                            // Create Dynamodb only for first time to run pipeline...
                            // To run it first_time uncomment it...
                             
                            // Create Dynamodb_Table for Terraform state locking
                            // echo 'Creating Dynamodb_Table for Terraform state locking...'
                            // sh """
                            //     aws dynamodb create-table \
                            //     --table-name terraform-state-lock-table \
                            //     --attribute-definitions AttributeName=LockID,AttributeType=S \
                            //     --key-schema AttributeName=LockID,KeyType=HASH \
                            //     --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
                            // """
                            // Initializing Terraform
                            echo 'Initializing Terraform...'
                            sh 'terraform init -upgrade'
                            sh """
                                terraform apply -auto-approve \
                                -var 's3_key_app=${APP_ZIP}' \
                                -var 'source_code_hash_app=${fileHashApp}' \
                                -var 's3_key_layer=${PYTHON_LAYER_ZIP}' \
                                -var 'source_code_hash_layer=${fileHashLayer}' \
                                -var 's3_key_layer_libreoffice=${LIBREOFFICE_LAYER_ZIP}' \
                                -var 'source_code_hash_layer_libreoffice=${fileHashLibre}' \
                                -var 'api_gateway_url'=${apiGatewayUrl}
                            """
                        }
                    }
                }
            }
        }

        stage('Post-Deployment Info') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        dir(env.TF_PATH) {
                            def apiGatewayUrl = sh(returnStdout: true, script: 'terraform output -raw api_gateway_url').trim()
                            echo "Deployment Complete! Your API Gateway URL: ${apiGatewayUrl}"
                        }
                    }
                }
            }
        }
    }

    post {
        always { echo 'Cleaning up...' }
        failure { echo 'Pipeline failed!' }
        success { echo 'Pipeline completed successfully!' }
    }
}
