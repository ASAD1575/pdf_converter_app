pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '375299695019'
        AWS_DEFAULT_REGION = 'us-east-1'
        APP_SOURCE_PATH = 'pdf_converter_FastAPI_app/'
        TF_PATH = '.'
    }

    stages {
        stage('Checkout Source') {
            steps {
                script {
                    echo 'Checking out source code from SCM...'
                    checkout scm
                }
            }
        }

        // Stage: Install Python Dependencies for Lambda Deployment
        stage('Install Build Tools & Dependencies') {
            agent {
                docker {
                    image 'python:3.9-slim'
                    args '-u root'
                }
            }
            steps {
                script {
                    echo 'Updating package list and installing unzip...'
                    sh 'apt-get update && apt-get install -y unzip wget'

                    echo 'Installing AWS CLI and Python dependencies...'
                    // Use pip to install awscli, which is required by the withAWS step
                    sh 'pip install awscli'

                    // Install Python dependencies for the Lambda deployment package
                    dir("${env.APP_SOURCE_PATH}") {
                        sh 'pip install --target ./package --upgrade -r requirements.txt'
                        sh 'pip install --upgrade pip'
                        sh 'find . -name "__pycache__" -type d -print0 | xargs -0 rm -rf || true'
                    }
                }
            }
        }

        stage('AWS Login') {
            steps {
                script {
                    echo 'Logging into AWS and verifying credentials...'
                    // Use withCredentials to securely fetch and expose the secrets
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        // The variables are now available and will be used by the AWS CLI
                        sh 'aws sts get-caller-identity'
                    }
                }
            }
        }

        stage ('Terraform Init & Apply') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--entrypoint="" -u root:root'
                }
            }
            steps {
                script {
                    echo 'Initializing Terraform...'
                    
                    dir(env.TF){
                        sh '''
                        terraform init -upgrade
                        terraform apply -auto-approve
                        '''
                    }
                }
            }
        }
        
        stage('Post-Deployment Info') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--entrypoint="" -u root:root'
                }
            }
            steps {
                script {
                    echo 'Fetching deployment outputs...'
                    dir(env.TF_PATH) {
                        def apiGatewayUrl = sh(returnStdout: true, script: 'terraform output -raw api_gateway_url').trim()
                        echo "Deployment Complete! Your application is accessible at: ${apiGatewayUrl}"
                    }
                }
            }
        }
    }  

    post {
        always {
            script {
                echo 'Cleaning up workspace...'
                // cleanWs() // Uncomment to clean the workspace after every build
            }
        }
            
        failure {
            echo 'Pipeline failed! Check logs for errors.'
        }
            
        success {
            echo 'Pipeline completed successfully!'
        }
    } 
}
