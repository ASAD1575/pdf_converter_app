pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '375299695019'
        AWS_DEFAULT_REGION = 'us-east-1'
        APP_SOURCE_PATH = 'terraform/pdf_converter_FastAPI_app/'
        BOOTSTRAP_TF_PATH = 'bootstrap/'
        MAIN_TF_PATH = 'terraform/'
        S3_BUCKET_NAME = 'pdflambdabucket1575'
        ZIP_FILE_NAME = 'pdf_converter_app.zip'
    }

    stages {
        stage('Initialize Variables') {
            steps {
                script {
                    env.hostUserId = sh(returnStdout: true, script: 'id -u').trim()
                    env.hostGroupId = sh(returnStdout: true, script: 'id -g').trim()
                    echo "Jenkins user/group ID: ${env.hostUserId}:${env.hostGroupId}"
                }
            }
        }
        
        stage('Checkout Source') {
            steps {
                echo 'Checking out source code from SCM...'
                checkout scm
            }
        }
        
        stage('Bootstrap S3 and DynamoDB') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                    ]) {
                        dir(env.BOOTSTRAP_TF_PATH) {
                            echo "Bootstrapping S3 bucket and DynamoDB table..."
                            sh "terraform init"
                            sh "terraform apply -auto-approve"
                        }
                    }
                }
            }
        }

        stage('Install Build Tools & Dependencies') {
            agent {
                // CHANGED: Using a Docker image that matches the AWS Lambda Python 3.10 runtime
                docker {
                    image 'public.ecr.aws/lambda/python:3.10'
                    args '--user 0 --entrypoint=""'
                }
            }
            steps {
                echo 'Updating package list and installing zip...'
                sh 'yum update -y && yum install -y zip' // yum is the package manager on the Lambda base image

                dir("${env.APP_SOURCE_PATH}") {
                    echo "Installing dependencies into ${env.APP_SOURCE_PATH}..."
                    sh 'pip install --target . --upgrade -r requirements.txt'
                    sh 'find . -name "__pycache__" -type d | xargs -r rm -rf'
                    echo "Creating deployment package zip..."
                    sh 'zip -r ../../pdf_converter_app.zip .'
                }

                sh "chown ${env.hostUserId}:${env.hostGroupId} ${env.ZIP_FILE_NAME}"

                echo 'Stashing the deployment package for the next stage...'
                stash includes: "${env.ZIP_FILE_NAME}", name: 'app-code'
            }
        }

        stage ('Terraform Init & Apply') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'db-password', variable: 'TF_VAR_db_password')
                    ]) {
                        unstash 'app-code'

                        echo 'Initializing and Applying Terraform...'
                        
                        dir(env.MAIN_TF_PATH){
                            echo 'Installing AWS CLI in the Terraform container...'
                            sh 'apk update && apk add python3 py3-pip'
                            sh 'pip install awscli'
                            
                            def fileHash = sh(returnStdout: true, script: "sha256sum ../${env.ZIP_FILE_NAME} | awk '{print \$1}'").trim()
                            
                            echo "Uploading ${env.ZIP_FILE_NAME} to S3 bucket ${env.S3_BUCKET_NAME}..."
                            sh "aws s3 cp ../${env.ZIP_FILE_NAME} s3://${env.S3_BUCKET_NAME}/"

                            sh "terraform init -upgrade"

                            sh "terraform apply -auto-approve -var 's3_key=${env.ZIP_FILE_NAME}' -var 'source_code_hash=${fileHash}'"
                        }
                    }
                }
            }
        }
        
        stage('Post-Deployment Info') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {    
                        echo 'Fetching deployment outputs...'
                        dir(env.MAIN_TF_PATH) {
                            def apiGatewayUrl = sh(returnStdout: true, script: 'terraform output -raw api_gateway_url').trim()
                            echo "Deployment Complete! Your application is accessible at: ${apiGatewayUrl}"
                        }
                    }
                }
            }
        }
    }  

    post {
        always {
            echo 'Cleaning up workspace...'
        }
            
        failure {
            echo 'Pipeline failed! Check logs for errors.'
        }
        
        success {
            echo 'Pipeline completed successfully!'
        }
    } 
}
