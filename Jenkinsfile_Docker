pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '375299695019'
        AWS_DEFAULT_REGION = 'us-east-1'
        APP_SOURCE_PATH = 'pdf_converter_FastAPI_app/'
        TF_PATH = 'pdf_coverter_app'
    }

    stages {
        stage('Checkout Source') {
            steps {
                script {
                    echo 'Checking out source code from SCM...'
                    checkout scm
                }
            }
        }

        // Stage: Install Python Dependencies for Lambda Deployment
        stage('Install Lambda Dependencies') {
            steps {
                script {
                    echo 'Installing Python dependencies for Lambda deployment package...'
                    dir("${env.APP_SOURCE_PATH}") {
                        sh '''
                            sudo apt-get update -y
                            sudo ap-get install python3-pip -y
                            mkdir -p package
                            python3 -m pip install --target ./package -r requirements.txt
                            find . -name "__pycache__" -type d -exec rm -rf {} +

                        '''
                    }
                }
            }
        }

        stage('AWS Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        // Export credentials as environment variables
                        env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                        env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"
                        
                        // Optional: confirm login
                        sh 'aws sts get-caller-identity --region $AWS_REGION'
                    }
                }
            }
        }
        
        stage ('Terraform Init') {
            steps {
                script {
                    echo 'Initializing Terraform...'
                    
                    dir(env.TF){
                        sh 'terraform init -upgrade'
                    }
                }
            }
        }

        stage ('Terraform Apply') {
            steps {
                echo 'Applying Terraform configuration...'
                
                dir(env.TF){
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        
        stage('Post-Deployment Info') {
            steps {
                script {
                    echo 'Fetching deployment outputs...'
                    dir(env.TF_PATH) {
                        def apiGatewayUrl = sh(returnStdout: true, script: 'terraform output -raw api_gateway_url').trim()
                        echo "Deployment Complete! Your application is accessible at: ${apiGatewayUrl}"
                    }
                }
            }
        }
    }  

    post {
        always {
            script {
                echo 'Cleaning up workspace...'
                // cleanWs() // Uncomment to clean the workspace after every build
            }
        }
            
        failure {
            echo 'Pipeline failed! Check logs for errors.'
        }
            
        success {
            echo 'Pipeline completed successfully!'
        }
    } 
}
