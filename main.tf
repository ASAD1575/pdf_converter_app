terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 6.6.0"
    }
  }
}

# resource "aws_ecr_repository" "app_repo" {
#   name                 = "${var.app_name}-repo"
#   image_tag_mutability = "MUTABLE"

#   tags = {
#     Name = "${var.app_name}-repo"
#   }
# }

# Create DynamoDB Table for State Locking
# resource "aws_dynamodb_table" "terraform-state-lock-table" {
#   name         = "lockfile"
#   billing_mode = "PROVISIONED"
#   read_capacity  = 5
#   write_capacity = 5
#   hash_key     = "LockID"

#   attribute {
#     name = "LockID"
#     type = "S"
#   }

#   tags = {
#     Name = "pdfappbackend"
#   }
  
# }

# Configure the AWS provider
provider "aws" {
  region = "us-east-1"
}

module "vpc" {
  source = "./modules/vpc"
  cidr_block = "10.0.0.0/16"
  region = "us-east-1"
}

module "security_group" {
  source = "./modules/security_group"
  vpc_id = module.vpc.vpc_id
}

module "rds" {
  source            = "./modules/rds"
  region            = "us-east-1"
  identifier        = "pdfconverterdb"
  instance_class    = "db.t3.micro"
  engine            = "postgres"
  engine_version    = "14"
  database_name     = "pdfconverterdb"
  db_username       = "dbuser"
  db_password       = "Subhani786"
  port              = 5432
  security_group    = module.security_group.app_sg_id
  db_subnet_ids     = module.vpc.private_subnet_ids
}

module "efs" {
  source = "./modules/efs"
  region = "us-east-1"
  efs_name = "LibreOfficeEFS"
  subnet_ids = module.vpc.private_subnet_ids
  security_group_id = module.security_group.app_sg_id
  vpc_id = module.vpc.vpc_id

}

module "lambda_function" {
  source                    = "./modules/lambda_function"
  region                    = "us-east-1"
  function_name             = "pdfconverter"
  private_subnet_ids        = module.vpc.private_subnet_ids
  app_security_group_id     = module.security_group.app_security_group_id
  # secret_key                = var.secret_key
  # image_uri                 = var.image_uri
  # Layers
  # libreoffice_layer_arn     = var.libreoffice_layer_arn # Ensure this is set to the correct ARN for your region and runtime
  
  # RDS Environment Variables
  db_host                   = module.rds.rds_endpoint
  db_name                   = module.rds.db_name
  db_password               = module.rds.db_password
  db_port                   = module.rds.db_port
  db_user                   = module.rds.db_username
  
  # S3 (Code and Layer Sources)
  s3_bucket_name      = "pdflambdabucket1575"
  s3_key_app          = var.s3_key_app
  s3_key_layer        = var.s3_key_layer

  # Ensures Terraform detects zip changes
  source_code_hash_app = var.source_code_hash_app
  source_code_hash_layer = var.source_code_hash_layer
  # source_code_hash_libreoffice_layer = var.source_code_hash_libreoffice_layer

  efs_name = "LibreOfficeEFS"
  efs_access_point_arn = module.efs.efs_access_point_arn

}

# Add the API Gateway module
module "api_gateway" {
  source      = "./modules/api_gateway"
  region      = "us-east-1" # Use the region from the provider configuration
  api_name    = "pdf-converter-api"
# 
  # These inputs need to come from your Lambda function module's outputs.
  # You'll need to define and deploy your Lambda function (e.g., using a 'lambda' module)
  # and then pass its name, ARN, and invoke ARN here.
  # For now, these are placeholders.
  lambda_function_name       = module.lambda_function.function_name # Replace with actual Lambda function name
  lambda_function_arn        = module.lambda_function.function_arn # Replace with actual Lambda ARN
  lambda_function_invoke_arn = module.lambda_function.function_invoke_arn
}

module "cloudwatch" {
  source = "./modules/cloudwatch"
  region = "us-east-1"
  # Pass the function name from your Lambda module or CloudFormation stack
  function_name = module.lambda_function.function_name # If using Terraform Lambda module
  # OR if using CloudFormation for Lambda:
  # function_name = aws_cloudformation_stack.pdf_converter_lambda_cfn.outputs.FunctionName
  log_retention_in_days = 7 # Set your desired log retention
  environment           = "dev" # Or "prod", etc.
}


# --- Automation for local .env file update ---
resource "null_resource" "update_local_env" {
  depends_on = [
    module.rds,
    module.api_gateway,
  ]

  provisioner "local-exec" {
    # Use a multi-line heredoc to write the environment variables directly.
    # This avoids any path or permission issues with a separate script file.
    command = <<-EOT
      echo "Writing environment variables to ./pdf_converter_FastAPI_app/.env"
      cat << EOF > ./pdf_converter_FastAPI_app/.env
      # Environment variables for PDF Converter FastAPI App
      # Generated by Terraform output script

      DB_HOST="${module.rds.rds_endpoint}"
      DB_NAME="${module.rds.db_name}"
      DB_USER="${module.rds.db_username}"
      DB_PASSWORD="${module.rds.db_password}"
      DB_PORT="${module.rds.db_port}"
      EOF
      echo "Successfully updated ./pdf_converter_FastAPI_app/.env"
    EOT
  }
}