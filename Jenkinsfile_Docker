pipeline {
    agent none

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    stages {
        stage('Initialize Variables') {
            agent any
            steps {
                sh 'echo "Jenkins user/group ID: $(id -u):$(id -g)"'
            }
        }

        stage('Checkout Source') {
            agent any
            steps {
                echo 'Checking out source code from SCM...'
                checkout scm
            }
        }

        stage('Install Dependencies & Package Application') {
            // All steps now run in a single container to prevent issues
            agent any
            steps {
                echo 'Installing dependencies and packaging application...'
                withDockerContainer(image: 'public.ecr.aws/lambda/python:3.10', args: '-u root --entrypoint=') {
                    // Install the zip utility
                    sh 'yum update -y && yum install -y zip'

                    // Create dedicated directories for dependencies and app code
                    sh 'mkdir -p dependencies_content'
                    sh 'mkdir -p app_content'

                    // Install Python dependencies directly into the dependencies directory
                    sh 'pip install --target ./dependencies_content -r pdf_converter_FastAPI_app/requirements.txt'

                    // Create the dependencies zip file
                    dir('dependencies_content') {
                        sh 'zip -r ../dependencies.zip .'
                    }

                    // Copy the application code (excluding requirements.txt) into the app directory
                    sh 'cp -r pdf_converter_FastAPI_app/main.py pdf_converter_FastAPI_app/database.py pdf_converter_FastAPI_app/models.py pdf_converter_FastAPI_app/utils.py pdf_converter_FastAPI_app/static pdf_converter_FastAPI_app/templates pdf_converter_FastAPI_app/uploads ./app_content/'

                    // Create the application code zip file
                    dir('app_content') {
                        sh 'zip -r ../app.zip .'
                    }
                }
            }
        }

        stage('Terraform Init & Apply') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    echo 'Initializing Terraform...'
                    sh 'terraform init'

                    echo 'Applying Terraform configuration...'
                    // Calculate file hashes for both zip files
                    def appCodeHash = sh(script: "sha256sum app.zip | awk '{print \$1}'", returnStdout: true).trim()
                    def dependenciesCodeHash = sh(script: "sha256sum dependencies.zip | awk '{print \$1}'", returnStdout: true).trim()

                    // Pass both zip file names and their hashes to Terraform
                    sh "terraform apply -auto-approve -var='app_zip_file_name=app.zip' -var='app_code_hash=${appCodeHash}' -var='dependencies_zip_file_name=dependencies.zip' -var='dependencies_code_hash=${dependenciesCodeHash}'"
                }
            }
        }

        stage('Post-Deployment Info') {
            agent any
            steps {
                script {
                    echo 'Gathering post-deployment information...'
                    def apiEndpoint = sh(script: 'terraform output -raw api_gateway_url', returnStdout: true).trim()
                    echo "API Gateway Endpoint: ${apiEndpoint}"
                }
            }
        }
    }
    post {
        failure {
            echo "Pipeline failed! Check logs for errors."
        }
    }
}
