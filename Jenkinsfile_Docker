pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '375299695019'
        AWS_DEFAULT_REGION = 'us-east-1'
        APP_SOURCE_PATH = 'pdf_converter_FastAPI_app/'
        TF_PATH = '.'
        APP_ZIP = "app_package.zip"
        LAYER_ZIP = "dependencies_layer.zip"
        S3_BUCKET = "pdflambdabucket1575"
        ARTIFACT_NAME = 'libreoffice-layer.zip'
        LAYER_NAME = 'libreoffice-layer'
    }

    stages {
        stage('Initialize Variables') {
            steps {
                script {
                    env.hostUserId = sh(returnStdout: true, script: 'id -u').trim()
                    env.hostGroupId = sh(returnStdout: true, script: 'id -g').trim()
                    echo "Jenkins user/group ID: ${env.hostUserId}:${env.hostGroupId}"
                }
            }
        }

        stage('Build LibreOffice Layer') {
            agent {
                docker {
                    image 'ubuntu:22.04'
                    args '--user 0 -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                echo 'Installing required tools...'
                sh 'apt-get update && apt-get install -y curl tar zip binutils xz-utils'

                echo 'Downloading LibreOffice...'
                sh 'curl -L -o LibreOffice_deb.tar.gz "https://downloadarchive.documentfoundation.org/libreoffice/old/7.4.6.2/deb/x86_64/LibreOffice_7.4.6.2_Linux_x86-64_deb.tar.gz"'
                sh 'tar -zxvf LibreOffice_deb.tar.gz'

                echo 'Building layer...'
                sh '''#!/bin/bash
                    set -e
                    cd LibreOffice_7.4.6.2_Linux_x86-64_deb/DEBS
                    
                    mkdir -p libreoffice-layer/libreoffice
                    mkdir temp_extract
                    
                    REQUIRED_PACKAGES=(
                        "libobasis7.4-core"
                        "libreoffice7.4"
                        "libreoffice7.4-writer"
                        "libobasis7.4-writer"
                    )
                    
                    for package in "${REQUIRED_PACKAGES[@]}"; do
                        DEB_FILE=$(find . -maxdepth 1 -name "${package}_*.deb" | head -n 1)
                        if [[ -f "$DEB_FILE" ]]; then
                            ar p "$DEB_FILE" data.tar.xz | tar -JxC temp_extract
                        fi
                    done
                    
                    PROGRAM_DIR=$(find temp_extract -type d -name "program" | head -n 1)
                    if [[ -d "$PROGRAM_DIR" ]]; then
                        mv "$PROGRAM_DIR" libreoffice-layer/libreoffice/
                    fi
                    
                    cd libreoffice-layer/
                    zip -r ../libreoffice-layer.zip .
                    cd ..
                    rm -rf temp_extract
                    
                    ZIP_FILE_SIZE_MB=$(du -m libreoffice-layer.zip | cut -f1)
                    if (( ZIP_FILE_SIZE_MB >= 250 )); then
                        echo "ERROR: Layer exceeds 250MB limit"
                        exit 1
                    fi
                '''
                
                sh 'mv -rf LibreOffice_7.4.6.2_Linux_x86-64_deb/DEBS/libreoffice-layer.zip .'
                sh "chown ${hostUserId}:${hostGroupId} libreoffice-layer.zip"
                stash includes: 'libreoffice-layer.zip', name: 'libreoffice-layer'
            }
        }

        stage('Publish Lambda Layer') {
            agent {
                docker {
                    image 'amazon/aws-cli:latest'
                    args '--user 0 --entrypoint=""'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        unstash 'libreoffice-layer'
                        
                        sh "aws s3 cp ${ARTIFACT_NAME} s3://${S3_BUCKET}/${ARTIFACT_NAME} --acl private"
                        
                        script {
                            def layerArn = sh(
                                returnStdout: true,
                                script: """
                                    aws lambda publish-layer-version \
                                    --region us-east-1 \
                                    --layer-name ${LAYER_NAME} \
                                    --content S3Bucket=${S3_BUCKET},S3Key=${ARTIFACT_NAME} \
                                    --compatible-runtimes python3.7 python3.8 python3.9 python3.10 \
                                    --query "LayerVersionArn" \
                                    --output text
                                """
                            ).trim()
                            
                            if (!layerArn || layerArn == "None") {
                                error("Failed to retrieve Lambda layer ARN")
                            }
                            
                            env.LIBREOFFICE_LAYER_ARN = layerArn
                            writeFile file: 'libreoffice_layer_arn.txt', text: layerArn
                        }
                        
                        stash includes: 'libreoffice_layer_arn.txt', name: 'libreoffice-arn'
                    }
                }
            }
        }

        stage('Build Lambda Packages') {
            agent {
                docker {
                    image 'amazonlinux:2'
                    args '--user 0 --entrypoint=""'
                }
            }
            steps {
                sh '''
                yum update -y && yum install -y python3 python3-pip zip
                
                rm -f $APP_ZIP $LAYER_ZIP
                rm -rf build
                mkdir -p build/app build/dependencies/python
                
                # Build app zip
                cp -r pdf_converter_FastAPI_app/main.py \
                    pdf_converter_FastAPI_app/database.py \
                    pdf_converter_FastAPI_app/models.py \
                    pdf_converter_FastAPI_app/utils.py \
                    pdf_converter_FastAPI_app/templates \
                    build/app/
                
                cd build/app && zip -r ../../$APP_ZIP . && cd ../..

                # Build dependencies layer zip
                pip3 install -r pdf_converter_FastAPI_app/requirements.txt -t build/dependencies/python/
                cd build/dependencies && zip -r ../../$LAYER_ZIP . && cd ../..

                # Change ownership
                chown ${hostUserId}:${hostGroupId} $APP_ZIP
                chown ${hostUserId}:${hostGroupId} $LAYER_ZIP
                '''

                stash includes: "${APP_ZIP}", name: 'app-code'
                stash includes: "${LAYER_ZIP}", name: 'dependencies-layer'
            }
        }

        stage('Deploy with Terraform') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        unstash 'app-code'
                        unstash 'dependencies-layer'
                        unstash 'libreoffice-arn'
                        
                        def libreofficeLayerArn = readFile('libreoffice_layer_arn.txt').trim()

                        dir(env.TF_PATH) {
                            echo 'Installing dependencies...'
                            sh 'apk add --no-cache python3 py3-pip coreutils'
                            sh 'pip install awscli'

                            def fileHashApp = sh(returnStdout: true, script: "sha256sum ${APP_ZIP} | awk '{print \$1}'").trim()
                            def fileHashLayer = sh(returnStdout: true, script: "sha256sum ${LAYER_ZIP} | awk '{print \$1}'").trim()
                            def fileHashLibreoffice = sh(returnStdout: true, script: "sha256sum ${LAYER_ZIP} | awk '{print \$1}'").trim()
                            
                            echo "Uploading to S3..."
                            sh "aws s3 cp ${APP_ZIP} s3://${S3_BUCKET}/"
                            sh "aws s3 cp ${LAYER_ZIP} s3://${S3_BUCKET}/"
                            sh "aws s3 cp ${ARTIFACT_NAME} s3://${S3_BUCKET}/"

                            echo 'Deploying with Terraform...'
                            sh 'terraform init -upgrade'
                            sh """
                                terraform apply -auto-approve \
                                -var 's3_key_app=${APP_ZIP}' \
                                -var 'source_code_hash_app=${fileHashApp}' \
                                -var 's3_key_layer=${LAYER_ZIP}' \
                                -var 'source_code_hash_layer=${fileHashLayer}' \
                                -var 'libreoffice_layer_arn=${libreofficeLayerArn}' \
                                -var 'source_code_hash_libreoffice_layer=${fileHashLibreoffice}'
                            """
                        }
                    }
                }
            }
        }

        stage('Post-Deployment Info') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        dir(env.TF_PATH) {
                            def apiGatewayUrl = sh(returnStdout: true, script: 'terraform output -raw api_gateway_url').trim()
                            echo "Deployment Complete! Your API Gateway URL: ${apiGatewayUrl}"
                        }
                    }
                }
            }
        }
    }

    post {
        always { echo 'Cleaning up...' }
        failure { echo 'Pipeline failed!' }
        success { echo 'Pipeline completed successfully!' }
    }
}
