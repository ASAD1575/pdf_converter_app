pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '375299695019'
        AWS_DEFAULT_REGION = 'us-east-1'
        APP_SOURCE_PATH = 'pdf_converter_FastAPI_app/'
        TF_PATH = '.'
        APP_ZIP = "app_package.zip"
        LAYER_ZIP = "dependencies_layer.zip"
        S3_BUCKET = "pdflambdabucket1575"
    }

    stages {
        stage('Initialize Variables') {
            steps {
                script {
                    env.hostUserId = sh(returnStdout: true, script: 'id -u').trim()
                    env.hostGroupId = sh(returnStdout: true, script: 'id -g').trim()
                    echo "Jenkins user/group ID: ${env.hostUserId}:${env.hostGroupId}"
                }
            }
        }

        stage('Checkout Source') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Build Lambda Packages') {
            agent {
                docker {
                    image 'public.ecr.aws/lambda/python:3.10'
                    args '--user 0 --entrypoint=""'
                }
            }
            steps {
                sh '''
                yum install -y zip

                rm -f $APP_ZIP $LAYER_ZIP
                rm -rf build
                mkdir -p build/app build/dependencies/python
                ls -l

                # Build app zip
                cp -r pdf_converter_FastAPI_app/main.py \
                    pdf_converter_FastAPI_app/database.py \
                    pdf_converter_FastAPI_app/models.py \
                    pdf_converter_FastAPI_app/utils.py \
                    pdf_converter_FastAPI_app/templates \
                    pdf_converter_FastAPI_app/static \
                    build/app/
                
                cd build/app && zip -r ../../$APP_ZIP . && cd ../..

                # Build dependencies layer zip
                pip install -r pdf_converter_FastAPI_app/requirements.txt -t build/dependencies/python/
                cd build/dependencies && zip -r ../../$LAYER_ZIP . && cd ../..

                chown ${hostUserId}:${hostGroupId} $APP_ZIP
                chown ${hostUserId}:${hostGroupId} $LAYER_ZIP
                '''

                stash includes: "${APP_ZIP}", name: 'app-code'
                stash includes: "${LAYER_ZIP}", name: 'dependencies-layer'
            }
        }

        stage('Terraform Deploy') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        unstash 'app-code'
                        unstash 'dependencies-layer'

                        dir(env.TF_PATH) {
                            sh 'apk add --no-cache python3 py3-pip coreutils'
                            sh 'pip install awscli'

                            def fileHashApp = sh(returnStdout: true, script: "sha256sum ${APP_ZIP} | awk '{print \$1}'").trim()
                            def fileHashLayer = sh(returnStdout: true, script: "sha256sum ${LAYER_ZIP} | awk '{print \$1}'").trim()

                            sh "aws s3 cp ${APP_ZIP} s3://${S3_BUCKET}/"
                            sh "aws s3 cp ${LAYER_ZIP} s3://${S3_BUCKET}/"

                            sh 'terraform init -upgrade'
                            sh """
                                terraform apply -auto-approve \
                                -var 's3_key_app=${APP_ZIP}' \
                                -var 'source_code_hash_app=${fileHashApp}' \
                                -var 's3_key_layer=${LAYER_ZIP}' \
                                -var 'source_code_hash_layer=${fileHashLayer}'
                            """
                        }
                    }
                }
            }
        }

        stage('Post-Deployment Info') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        dir(env.TF_PATH) {
                            def apiGatewayUrl = sh(returnStdout: true, script: 'terraform output -raw api_gateway_url').trim()
                            echo "Deployment Complete! Your API Gateway URL: ${apiGatewayUrl}"
                        }
                    }
                }
            }
        }
    }

    post {
        always { echo 'Cleaning up...' }
        failure { echo 'Pipeline failed!' }
        success { echo 'Pipeline completed successfully!' }
    }
}
