pipeline {
    // Set agent to 'none' at the pipeline level to allow per-stage agents
    agent none

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    stages {
        stage('Initialize Variables') {
            agent any
            steps {
                script {
                    sh 'id -u'
                    sh 'id -g'
                    sh 'echo "Jenkins user/group ID: $(id -u):$(id -g)"'
                }
            }
        }

        stage('Checkout Source') {
            agent any
            steps {
                echo 'Checking out source code from SCM...'
                checkout scm
            }
        }

        stage('Install Build Tools & Dependencies') {
            steps {
                // --- FIX: Run yum as root, as it needs elevated permissions ---
                // This `withDockerContainer` block runs as root by default
                echo 'Installing system dependencies with root user...'
                withDockerContainer(image: 'public.ecr.aws/lambda/python:3.10') {
                    sh 'yum update -y && yum install -y zip'
                }

                // --- FIX: Run pip with the non-root user for security and file ownership ---
                // This `withDockerContainer` block runs as user 1000
                echo 'Installing Python dependencies with non-root user...'
                withDockerContainer(image: 'public.ecr.aws/lambda/python:3.10', args: '-u 1000:1000 --entrypoint=') {
                    sh 'mkdir -p dependencies/python'
                    dir('dependencies/python') {
                        sh 'pip install --target . -r ../../pdf_converter_FastAPI_app/requirements.txt'
                    }
                }
            }
        }

        stage('Package Application and Dependencies') {
            // Run subsequent stages in the non-root container for consistency
            agent {
                docker {
                    image 'public.ecr.aws/lambda/python:3.10'
                    args '-u 1000:1000 --entrypoint='
                }
            }
            steps {
                script {
                    def appZipFile = 'pdf_converter_app.zip'
                    def dependenciesZipFile = 'dependencies.zip'

                    echo 'Packaging application code...'
                    sh "zip -r -j ${appZipFile} pdf_converter_FastAPI_app/*"
                    
                    echo 'Packaging dependencies layer...'
                    dir('dependencies') {
                        sh "zip -r ../${dependenciesZipFile} ."
                    }
                }
            }
        }

        stage('Terraform Init & Apply') {
            agent any // Terraform can run on the host agent
            steps {
                script {
                    echo 'Initializing Terraform...'
                    sh 'terraform -chdir=terraform init'

                    echo 'Applying Terraform configuration...'
                    // Calculate file hashes
                    def appCodeHash = sh(script: "sha256sum pdf_converter_app.zip | awk '{print \$1}'", returnStdout: true).trim()
                    def dependenciesCodeHash = sh(script: "sha256sum dependencies.zip | awk '{print \$1}'", returnStdout: true).trim()

                    // Pass hashes to Terraform as variables
                    sh "terraform -chdir=terraform apply -auto-approve -var='app_zip_file_name=pdf_converter_app.zip' -var='app_code_hash=${appCodeHash}' -var='dependencies_zip_file_name=dependencies.zip' -var='dependencies_code_hash=${dependenciesCodeHash}'"
                }
            }
        }

        stage('Post-Deployment Info') {
            agent any
            steps {
                script {
                    echo 'Gathering post-deployment information...'
                    def apiEndpoint = sh(script: 'terraform -chdir=terraform output -raw api_gateway_url', returnStdout: true).trim()
                    echo "API Gateway Endpoint: ${apiEndpoint}"
                }
            }
        }
    }
    post {
        failure {
            echo "Pipeline failed! Check logs for errors."
        }
    }
}
