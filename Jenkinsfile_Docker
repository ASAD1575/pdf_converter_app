pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '375299695019'
        AWS_DEFAULT_REGION = 'us-east-1'
        APP_SOURCE_PATH = 'pdf_converter_FastAPI_app/'
        TF_PATH = 'pdf_coverter_app'
    }

    stages {
        stage('Checkout Source') {
            steps {
                script {
                    echo 'Checking out source code from SCM...'
                    checkout scm
                }
            }
        }

        // Stage: Install Python Dependencies for Lambda Deployment
        stage('Install Lambda Dependencies') {
            steps {
                script {
                    echo 'Installing Python dependencies for Lambda deployment package...'
                    dir("${env.APP_SOURCE_PATH}") {
                        // --- DEBUGGING STEPS START ---
                        echo 'Debugging environment and file paths...'
                        // Check if python3 is available
                        sh 'which python3'
                        // List files in the current directory to verify requirements.txt exists
                        sh 'ls -l'
                        // --- DEBUGGING STEPS END ---
                        
                        // Create a 'package' directory to install dependencies into
                        sh 'mkdir -p package'
                        // Use 'python3 -m pip' for robust pip invocation
                        sh 'python3 -m pip install --target ./package -r requirements.txt'
                        // Clean up __pycache__ directories to reduce package size
                        sh 'find . -name "__pycache__" -type d -exec rm -rf {} +'
                    }
                }
            }
        }

        stage ('Terraform Init') {
            steps {
                script {
                    echo 'Initializing Terraform...'
                    
                    dir(env.TF){
                        sh 'terraform init -upgrade'
                    }
                }
            }
        }

        stage ('Terraform Apply') {
            steps {
                echo 'Applying Terraform configuration...'
                
                dir(env.TF){
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        
        stage('Post-Deployment Info') {
            steps {
                script {
                    echo 'Fetching deployment outputs...'
                    dir(env.TF_PATH) {
                        def apiGatewayUrl = sh(returnStdout: true, script: 'terraform output -raw api_gateway_url').trim()
                        echo "Deployment Complete! Your application is accessible at: ${apiGatewayUrl}"
                    }
                }
            }
        }
    }  

    post {
        always {
            script {
                echo 'Cleaning up workspace...'
                // cleanWs() // Uncomment to clean the workspace after every build
            }
        }
            
        failure {
            echo 'Pipeline failed! Check logs for errors.'
        }
            
        success {
            echo 'Pipeline completed successfully!'
        }
    } 
}
