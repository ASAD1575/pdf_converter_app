pipeline {
    // Set agent to 'none' at the pipeline level to allow per-stage agents
    agent none

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    stages {
        stage('Initialize Variables') {
            // Run this stage on the Jenkins host
            agent any
            steps {
                sh 'id -u'
                sh 'id -g'
                sh 'echo "Jenkins user/group ID: $(id -u):$(id -g)"'
            }
        }

        stage('Checkout Source') {
            // Run this stage on the Jenkins host
            agent any
            steps {
                echo 'Checking out source code from SCM...'
                checkout scm
            }
        }

        stage('Install Dependencies & Package Application') {
            // All steps now run in a single container to prevent issues
            agent any
            steps {
                echo 'Installing dependencies and packaging application...'
                withDockerContainer(image: 'public.ecr.aws/lambda/python:3.10', args: '-u root --entrypoint=') {
                    // Install the zip utility
                    sh 'yum update -y && yum install -y zip'

                    // Create a dedicated directory to build the final Lambda package
                    sh 'mkdir -p package_content'

                    // Install Python dependencies directly into the package content directory
                    sh 'pip install --target ./package_content -r pdf_converter_FastAPI_app/requirements.txt'

                    // Copy the application code into the package content directory
                    sh 'cp -r pdf_converter_FastAPI_app/* ./package_content/'

                    // Create the final zip file from the package content directory
                    dir('package_content') {
                        sh 'zip -r ../lambda_package.zip .'
                    }
                }
            }
        }

        stage('Terraform Init & Apply') {
            // Run this stage on the Jenkins host
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    // FIX: Run as root, disable entrypoint, AND provide a public DNS server
                    // to fix the i/o timeout error when connecting to registry.terraform.io.
                    args '--user 0 --entrypoint="" --dns 8.8.8.8'
                }
            }
            steps {
                script {
                    echo 'Initializing Terraform...'
                    sh 'terraform init'

                    echo 'Applying Terraform configuration...'
                    // Calculate file hash for the combined package
                    def sourceCodeHash = sh(script: "sha256sum lambda_package.zip | awk '{print \$1}'", returnStdout: true).trim()

                    // Pass the single zip file name and its hash to Terraform
                    sh "terraform apply -auto-approve -var='s3_key=lambda_package.zip' -var='source_code_hash=${sourceCodeHash}'"
                }
            }
        }

        stage('Post-Deployment Info') {
            // Run this stage on the Jenkins host
            agent any
            steps {
                script {
                    echo 'Gathering post-deployment information...'
                    def apiEndpoint = sh(script: 'terraform output -raw api_gateway_url', returnStdout: true).trim()
                    echo "API Gateway Endpoint: ${apiEndpoint}"
                }
            }
        }
    }
    post {
        failure {
            echo "Pipeline failed! Check logs for errors."
        }
    }
}
